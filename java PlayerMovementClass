globalEventHandler.addListener(PlayerMoveEvent.class, playerMoveEvent -> {
            final Player player = playerMoveEvent.getPlayer();
            final int minX = -6;
            final int maxX = 7;
            final int minZ = -22;
            final int maxZ = -17;
            int x = (int) player.getPosition().x();
            int z = (int) player.getPosition().z();
            boolean isInZone = x >= minX && x <= maxX && z >= minZ && z <= maxZ;

            if (isInZone) {
                // Игрок в зоне
                player.sendActionBar(Component.text("ГОТОВ").color(TextColor.color(0, 255, 0)));
                if (!PlayerInReadyZone.contains(player.getUsername())) {
                    PlayerInReadyZone.add(player.getUsername()); // Добавляем игрока в список, если его там нет
                }
            } else {
                if(PlayerInGame.isEmpty()){player.sendActionBar(Component.text("НЕ ГОТОВ").color(TextColor.color(255, 0, 0)));
                    PlayerInReadyZone.remove(player.getUsername());}else{PlayerInReadyZone.remove(player.getUsername());}
            }

            // Проверяем, нужно ли начинать отсчет
            if (PlayerInReadyZone.size() > 1 && !isTaskScheduled.get()) {
                // Создаем уникальный список готовых игроков
                LinkedHashSet<String> linkedHashSet = new LinkedHashSet<>(PlayerInReadyZone);
                ArrayList<String> PlayerInReadyZone1 = new ArrayList<>(linkedHashSet);

                // Устанавливаем флаг, что задача запланирована
                isTaskScheduled.set(true);

                // Запуск отсчета с 15 секунд
                for (int i = 15; i >= 1; i--) {
                    final int finalI = i;
                    MinecraftServer.getSchedulerManager().buildTask(() -> {
                        // Проверка, кто остался в зоне на каждом шаге отсчета
                        PlayerInReadyZone1.removeIf(username -> {
                            Player playerToCheck = MinecraftServer.getConnectionManager().findOnlinePlayer(username);
                            if (playerToCheck != null) {
                                int xPos = (int) playerToCheck.getPosition().x();
                                int zPos = (int) playerToCheck.getPosition().z();
                                // Убираем игрока из списка, если он больше не в зоне
                                return !(xPos >= minX && xPos <= maxX && zPos >= minZ && zPos <= maxZ);
                            }
                            return true; // Если игрок не найден, исключаем его из отсчета
                        });

                        // Отображение отсчета и обновление действия для игроков, которые остались в зоне
                        for (String username : PlayerInReadyZone1) {
                            Player playerInZone = MinecraftServer.getConnectionManager().findOnlinePlayer(username);
                            if (playerInZone != null) {
                                playerInZone.sendActionBar(Component.text("ГОТОВ").color(TextColor.color(0, 255, 0)));
                            }
                        }
                        queueMeta.setText(Component.text(finalI)); // Отображаем текущий отсчет

                        // Если остался один игрок или все вышли из зоны, сбрасываем отсчет
                        if (PlayerInReadyZone1.size() <= 1) {
                            // Прерываем отсчет, очищаем список игроков и сбрасываем очередь
                            isTaskScheduled.set(false);
                            queueMeta.setText(Component.text(" "));
                        }
                    }).delay(15 - finalI, TimeUnit.SECOND).schedule();
                }
